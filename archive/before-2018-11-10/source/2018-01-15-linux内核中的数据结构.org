#+AUTHOR: Peng Xie
#+EMAIL: pengpengxpplay@gmail.com
#+SETUPFILE: theme.setup
#+OPTIONS: ^:{}
#+TITLE: linux内核中的数据结构

最近项目中需要使用链表，我们直接就把kernel中的链表拿来使用了。

为了方便复用，内核把一些常用的数据结构都提取出来了。可以参考
[[https://notes.shichao.io/lkd/ch6/][Chapter 6. Kernel Data Structures - Shichao's Notes]] 。主要就是下面几种：
 
+ Linked lists
+ Queues
+ Maps
+ Binary trees

* Linked lists
** list.h
   #+BEGIN_SRC C :tangle /tmp/kernel_data_structure/list/list.h :main no :mkdirp yes
/**
 ,* Copyright (C) 2017 Bei Jing Fu Hua Yu Qi Info Tech, Inc
 ,*
 ,* This file porting from Linux kernel
 ,*
 ,* @file
 ,* @author zhang jian ming
 ,* @date 1/3/18
 ,*/

#ifndef __FHOS_LIST_H__
#define __FHOS_LIST_H__


#define LIST_POISON1  ((void *) 0xdeadbeef)
#define LIST_POISON2  ((void *) 0xbaadf00d)

#ifndef offsetof
#define offsetof(type, member) ((size_t) &((type *)0)->member)
#endif

/**
 ,* container_of - cast a member of a structure out to the containing structure
 ,* @ptr:	the pointer to the member.
 ,* @type:	the type of the container struct this is embedded in.
 ,* @member:	the name of the member within the struct.
 ,*
 ,*/
#define container_of(ptr, type, member) ({                  \
    const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
    (type *)( (char *)__mptr - offsetof(type,member) );})


struct list_head {
    struct list_head *next, *prev;
};

struct hlist_head {
    struct hlist_node *first;
};

struct hlist_node {
    struct hlist_node *next, **pprev;
};


/*
 ,* Simple doubly linked list implementation.
 ,*
 ,* Some of the internal functions ("__xxx") are useful when
 ,* manipulating whole lists rather than single entries, as
 ,* sometimes we already know the next/prev entries and we can
 ,* generate better code by using them directly rather than
 ,* using the generic single-entry routines.
 ,*/

#define LIST_HEAD_INIT(name) { &(name), &(name) }

#define LIST_HEAD(name) \
    struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
    list->next = list;
    list->prev = list;
}

/*
 ,* Insert a new entry between two known consecutive entries.
 ,*
 ,* This is only for internal list manipulation where we know
 ,* the prev/next entries already!
 ,*/
#ifndef CONFIG_DEBUG_LIST
static inline void __list_add(struct list_head *new,
                              struct list_head *prev,
                              struct list_head *next)
{
    next->prev = new;
    new->next = next;
    new->prev = prev;
    prev->next = new;
}
#else
extern void __list_add(struct list_head *new,
                       struct list_head *prev,
                       struct list_head *next);
#endif

/**
 ,* list_add - add a new entry
 ,* @new: new entry to be added
 ,* @head: list head to add it after
 ,*
 ,* Insert a new entry after the specified head.
 ,* This is good for implementing stacks.
 ,*/
static inline void list_add(struct list_head *new, struct list_head *head)
{
    __list_add(new, head, head->next);
}


/**
 ,* list_add_tail - add a new entry
 ,* @new: new entry to be added
 ,* @head: list head to add it before
 ,*
 ,* Insert a new entry before the specified head.
 ,* This is useful for implementing queues.
 ,*/
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
    __list_add(new, head->prev, head);
}

/*
 ,* Delete a list entry by making the prev/next entries
 ,* point to each other.
 ,*
 ,* This is only for internal list manipulation where we know
 ,* the prev/next entries already!
 ,*/
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
    next->prev = prev;
    prev->next = next;
}

/**
 ,* list_del - deletes entry from list.
 ,* @entry: the element to delete from the list.
 ,* Note: list_empty() on entry does not return true after this, the entry is
 ,* in an undefined state.
 ,*/
#ifndef CONFIG_DEBUG_LIST
static inline void __list_del_entry(struct list_head *entry)
{
    __list_del(entry->prev, entry->next);
}

static inline void list_del(struct list_head *entry)
{
    __list_del(entry->prev, entry->next);
    entry->next = LIST_POISON1;
    entry->prev = LIST_POISON2;
}
#else
extern void __list_del_entry(struct list_head *entry);
extern void list_del(struct list_head *entry);
#endif

/**
 ,* list_replace - replace old entry by new one
 ,* @old : the element to be replaced
 ,* @new : the new element to insert
 ,*
 ,* If @old was empty, it will be overwritten.
 ,*/
static inline void list_replace(struct list_head *old,
                                struct list_head *new)
{
    new->next = old->next;
    new->next->prev = new;
    new->prev = old->prev;
    new->prev->next = new;
}

static inline void list_replace_init(struct list_head *old,
                                     struct list_head *new)
{
    list_replace(old, new);
    INIT_LIST_HEAD(old);
}

/**
 ,* list_del_init - deletes entry from list and reinitialize it.
 ,* @entry: the element to delete from the list.
 ,*/
static inline void list_del_init(struct list_head *entry)
{
    __list_del_entry(entry);
    INIT_LIST_HEAD(entry);
}

/**
 ,* list_move - delete from one list and add as another's head
 ,* @list: the entry to move
 ,* @head: the head that will precede our entry
 ,*/
static inline void list_move(struct list_head *list, struct list_head *head)
{
    __list_del_entry(list);
    list_add(list, head);
}

/**
 ,* list_move_tail - delete from one list and add as another's tail
 ,* @list: the entry to move
 ,* @head: the head that will follow our entry
 ,*/
static inline void list_move_tail(struct list_head *list,
				  struct list_head *head)
{
    __list_del_entry(list);
    list_add_tail(list, head);
}

/**
 ,* list_is_last - tests whether @list is the last entry in list @head
 ,* @list: the entry to test
 ,* @head: the head of the list
 ,*/
static inline int list_is_last(const struct list_head *list,
                               const struct list_head *head)
{
    return list->next == head;
}

/**
 ,* list_empty - tests whether a list is empty
 ,* @head: the list to test.
 ,*/
static inline int list_empty(const struct list_head *head)
{
    return head->next == head;
}

/**
 ,* list_empty_careful - tests whether a list is empty and not being modified
 ,* @head: the list to test
 ,*
 ,* Description:
 ,* tests whether a list is empty _and_ checks that no other CPU might be
 ,* in the process of modifying either member (next or prev)
 ,*
 ,* NOTE: using list_empty_careful() without synchronization
 ,* can only be safe if the only activity that can happen
 ,* to the list entry is list_del_init(). Eg. it cannot be used
 ,* if another CPU could re-list_add() it.
 ,*/
static inline int list_empty_careful(const struct list_head *head)
{
    struct list_head *next = head->next;
    return (next == head) && (next == head->prev);
}

/**
 ,* list_rotate_left - rotate the list to the left
 ,* @head: the head of the list
 ,*/
static inline void list_rotate_left(struct list_head *head)
{
    struct list_head *first;

    if (!list_empty(head)) {
        first = head->next;
        list_move_tail(first, head);
    }
}

/**
 ,* list_is_singular - tests whether a list has just one entry.
 ,* @head: the list to test.
 ,*/
static inline int list_is_singular(const struct list_head *head)
{
    return !list_empty(head) && (head->next == head->prev);
}

static inline void __list_cut_position(struct list_head *list,
                                       struct list_head *head,
                                       struct list_head *entry)
{
    struct list_head *new_first = entry->next;
    list->next = head->next;
    list->next->prev = list;
    list->prev = entry;
    entry->next = list;
    head->next = new_first;
    new_first->prev = head;
}

/**
 ,* list_cut_position - cut a list into two
 ,* @list: a new list to add all removed entries
 ,* @head: a list with entries
 ,* @entry: an entry within head, could be the head itself
 ,*	and if so we won't cut the list
 ,*
 ,* This helper moves the initial part of @head, up to and
 ,* including @entry, from @head to @list. You should
 ,* pass on @entry an element you know is on @head. @list
 ,* should be an empty list or a list you do not care about
 ,* losing its data.
 ,*
 ,*/
static inline void list_cut_position(struct list_head *list,
                                     struct list_head *head,
                                     struct list_head *entry)
{
    if (list_empty(head))
        return;
    if (list_is_singular(head) &&
        (head->next != entry && head != entry))
        return;
    if (entry == head)
        INIT_LIST_HEAD(list);
    else
        __list_cut_position(list, head, entry);
}

static inline void __list_splice(const struct list_head *list,
                                 struct list_head *prev,
                                 struct list_head *next)
{
    struct list_head *first = list->next;
    struct list_head *last = list->prev;

    first->prev = prev;
    prev->next = first;

    last->next = next;
    next->prev = last;
}

/**
 ,* list_splice - join two lists, this is designed for stacks
 ,* @list: the new list to add.
 ,* @head: the place to add it in the first list.
 ,*/
static inline void list_splice(const struct list_head *list,
                               struct list_head *head)
{
    if (!list_empty(list))
        __list_splice(list, head, head->next);
}

/**
 ,* list_splice_tail - join two lists, each list being a queue
 ,* @list: the new list to add.
 ,* @head: the place to add it in the first list.
 ,*/
static inline void list_splice_tail(struct list_head *list,
                                    struct list_head *head)
{
    if (!list_empty(list))
        __list_splice(list, head->prev, head);
}

/**
 ,* list_splice_init - join two lists and reinitialise the emptied list.
 ,* @list: the new list to add.
 ,* @head: the place to add it in the first list.
 ,*
 ,* The list at @list is reinitialised
 ,*/
static inline void list_splice_init(struct list_head *list,
                                    struct list_head *head)
{
    if (!list_empty(list)) {
        __list_splice(list, head, head->next);
        INIT_LIST_HEAD(list);
    }
}

/**
 ,* list_splice_tail_init - join two lists and reinitialise the emptied list
 ,* @list: the new list to add.
 ,* @head: the place to add it in the first list.
 ,*
 ,* Each of the lists is a queue.
 ,* The list at @list is reinitialised
 ,*/
static inline void list_splice_tail_init(struct list_head *list,
                                         struct list_head *head)
{
    if (!list_empty(list)) {
        __list_splice(list, head->prev, head);
        INIT_LIST_HEAD(list);
    }
}

/**
 ,* list_entry - get the struct for this entry
 ,* @ptr:	the &struct list_head pointer.
 ,* @type:	the type of the struct this is embedded in.
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_entry(ptr, type, member) \
    container_of(ptr, type, member)

/**
 ,* list_first_entry - get the first element from a list
 ,* @ptr:	the list head to take the element from.
 ,* @type:	the type of the struct this is embedded in.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Note, that list is expected to be not empty.
 ,*/
#define list_first_entry(ptr, type, member) \
    list_entry((ptr)->next, type, member)

/**
 ,* list_last_entry - get the last element from a list
 ,* @ptr:	the list head to take the element from.
 ,* @type:	the type of the struct this is embedded in.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Note, that list is expected to be not empty.
 ,*/
#define list_last_entry(ptr, type, member) \
    list_entry((ptr)->prev, type, member)

/**
 ,* list_first_entry_or_null - get the first element from a list
 ,* @ptr:	the list head to take the element from.
 ,* @type:	the type of the struct this is embedded in.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Note that if the list is empty, it returns NULL.
 ,*/
#define list_first_entry_or_null(ptr, type, member) \
    (!list_empty(ptr) ? list_first_entry(ptr, type, member) : NULL)

/**
 ,* list_next_entry - get the next element in list
 ,* @pos:	the type * to cursor
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_next_entry(pos, member) \
    list_entry((pos)->member.next, typeof(*(pos)), member)

/**
 ,* list_prev_entry - get the prev element in list
 ,* @pos:	the type * to cursor
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_prev_entry(pos, member) \
    list_entry((pos)->member.prev, typeof(*(pos)), member)

/**
 ,* list_for_each	-	iterate over a list
 ,* @pos:	the &struct list_head to use as a loop cursor.
 ,* @head:	the head for your list.
 ,*/
#define list_for_each(pos, head) \
    for (pos = (head)->next; pos != (head); pos = pos->next)

/**
 ,* list_for_each_prev	-	iterate over a list backwards
 ,* @pos:	the &struct list_head to use as a loop cursor.
 ,* @head:	the head for your list.
 ,*/
#define list_for_each_prev(pos, head) \
    for (pos = (head)->prev; pos != (head); pos = pos->prev)

/**
 ,* list_for_each_safe - iterate over a list safe against removal of list entry
 ,* @pos:	the &struct list_head to use as a loop cursor.
 ,* @n:		another &struct list_head to use as temporary storage
 ,* @head:	the head for your list.
 ,*/
#define list_for_each_safe(pos, n, head)                   \
    for (pos = (head)->next, n = pos->next; pos != (head); \
        pos = n, n = pos->next)

/**
 ,* list_for_each_prev_safe - iterate over a list backwards safe against removal of list entry
 ,* @pos:	the &struct list_head to use as a loop cursor.
 ,* @n:		another &struct list_head to use as temporary storage
 ,* @head:	the head for your list.
 ,*/
#define list_for_each_prev_safe(pos, n, head) \
    for (pos = (head)->prev, n = pos->prev;   \
         pos != (head);                       \
         pos = n, n = pos->prev)

/**
 ,* list_for_each_entry	-	iterate over list of given type
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_for_each_entry(pos, head, member)               \
    for (pos = list_first_entry(head, typeof(*pos), member); \
         &pos->member != (head);                             \
         pos = list_next_entry(pos, member))

/**
 ,* list_for_each_entry_reverse - iterate backwards over list of given type.
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_for_each_entry_reverse(pos, head, member)      \
    for (pos = list_last_entry(head, typeof(*pos), member); \
         &pos->member != (head);                            \
         pos = list_prev_entry(pos, member))

/**
 ,* list_prepare_entry - prepare a pos entry for use in list_for_each_entry_continue()
 ,* @pos:	the type * to use as a start point
 ,* @head:	the head of the list
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Prepares a pos entry for use as a start point in list_for_each_entry_continue().
 ,*/
#define list_prepare_entry(pos, head, member) \
    ((pos) ? : list_entry(head, typeof(*pos), member))

/**
 ,* list_for_each_entry_continue - continue iteration over list of given type
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Continue to iterate over list of given type, continuing after
 ,* the current position.
 ,*/
#define list_for_each_entry_continue(pos, head, member) \
    for (pos = list_next_entry(pos, member);            \
         &pos->member != (head);                        \
         pos = list_next_entry(pos, member))

/**
 ,* list_for_each_entry_continue_reverse - iterate backwards from the given point
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Start to iterate over list of given type backwards, continuing after
 ,* the current position.
 ,*/
#define list_for_each_entry_continue_reverse(pos, head, member) \
    for (pos = list_prev_entry(pos, member);                    \
         &pos->member != (head);                                \
         pos = list_prev_entry(pos, member))

/**
 ,* list_for_each_entry_from - iterate over list of given type from the current point
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Iterate over list of given type, continuing from current position.
 ,*/
#define list_for_each_entry_from(pos, head, member) \
    for (; &pos->member != (head);                  \
         pos = list_next_entry(pos, member))

/**
 ,* list_for_each_entry_safe - iterate over list of given type safe against removal of list entry
 ,* @pos:	the type * to use as a loop cursor.
 ,* @n:		another type * to use as temporary storage
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*/
#define list_for_each_entry_safe(pos, n, head, member)          \
    for (pos = list_first_entry(head, typeof(*pos), member),    \
         n = list_next_entry(pos, member);                      \
         &pos->member != (head);                                \
         pos = n, n = list_next_entry(n, member))

/**
 ,* list_for_each_entry_safe_continue - continue list iteration safe against removal
 ,* @pos:	the type * to use as a loop cursor.
 ,* @n:		another type * to use as temporary storage
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Iterate over list of given type, continuing after current point,
 ,* safe against removal of list entry.
 ,*/
#define list_for_each_entry_safe_continue(pos, n, head, member) \
    for (pos = list_next_entry(pos, member),                    \
         n = list_next_entry(pos, member);                      \
         &pos->member != (head);                                \
         pos = n, n = list_next_entry(n, member))

/**
 ,* list_for_each_entry_safe_from - iterate over list from current point safe against removal
 ,* @pos:	the type * to use as a loop cursor.
 ,* @n:		another type * to use as temporary storage
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Iterate over list of given type from current point, safe against
 ,* removal of list entry.
 ,*/
#define list_for_each_entry_safe_from(pos, n, head, member) \
    for (n = list_next_entry(pos, member);                  \
         &pos->member != (head);                            \
         pos = n, n = list_next_entry(n, member))

/**
 ,* list_for_each_entry_safe_reverse - iterate backwards over list safe against removal
 ,* @pos:	the type * to use as a loop cursor.
 ,* @n:		another type * to use as temporary storage
 ,* @head:	the head for your list.
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* Iterate backwards over list of given type, safe against removal
 ,* of list entry.
 ,*/
#define list_for_each_entry_safe_reverse(pos, n, head, member)  \
    for (pos = list_last_entry(head, typeof(*pos), member),     \
         n = list_prev_entry(pos, member);                      \
         &pos->member != (head);                                \
         pos = n, n = list_prev_entry(n, member))

/**
 ,* list_safe_reset_next - reset a stale list_for_each_entry_safe loop
 ,* @pos:	the loop cursor used in the list_for_each_entry_safe loop
 ,* @n:		temporary storage used in list_for_each_entry_safe
 ,* @member:	the name of the list_head within the struct.
 ,*
 ,* list_safe_reset_next is not safe to use in general if the list may be
 ,* modified concurrently (eg. the lock is dropped in the loop body). An
 ,* exception to this is if the cursor element (pos) is pinned in the list,
 ,* and list_safe_reset_next is called after re-taking the lock and before
 ,* completing the current iteration of the loop body.
 ,*/
#define list_safe_reset_next(pos, n, member)    \
    n = list_next_entry(pos, member)

/*
 ,* Double linked lists with a single pointer list head.
 ,* Mostly useful for hash tables where the two pointer list head is
 ,* too wasteful.
 ,* You lose the ability to access the tail in O(1).
 ,*/

#define HLIST_HEAD_INIT { .first = NULL }
#define HLIST_HEAD(name) struct hlist_head name = {  .first = NULL }
#define INIT_HLIST_HEAD(ptr) ((ptr)->first = NULL)
static inline void INIT_HLIST_NODE(struct hlist_node *h)
{
    h->next = NULL;
    h->pprev = NULL;
}

static inline int hlist_unhashed(const struct hlist_node *h)
{
    return !h->pprev;
}

static inline int hlist_empty(const struct hlist_head *h)
{
    return !h->first;
}

static inline void __hlist_del(struct hlist_node *n)
{
    struct hlist_node *next = n->next;
    struct hlist_node **pprev = n->pprev;
    ,*pprev = next;
    if (next)
        next->pprev = pprev;
}

static inline void hlist_del(struct hlist_node *n)
{
    __hlist_del(n);
    n->next = LIST_POISON1;
    n->pprev = LIST_POISON2;
}

static inline void hlist_del_init(struct hlist_node *n)
{
    if (!hlist_unhashed(n)) {
        __hlist_del(n);
        INIT_HLIST_NODE(n);
    }
}

static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
    struct hlist_node *first = h->first;
    n->next = first;
    if (first)
        first->pprev = &n->next;
    h->first = n;
    n->pprev = &h->first;
}

/* next must be != NULL */
static inline void hlist_add_before(struct hlist_node *n,
                                    struct hlist_node *next)
{
    n->pprev = next->pprev;
    n->next = next;
    next->pprev = &n->next;
    ,*(n->pprev) = n;
}

static inline void hlist_add_behind(struct hlist_node *n,
                                    struct hlist_node *prev)
{
    n->next = prev->next;
    prev->next = n;
    n->pprev = &prev->next;

    if (n->next)
        n->next->pprev  = &n->next;
}

/* after that we'll appear to be on some hlist and hlist_del will work */
static inline void hlist_add_fake(struct hlist_node *n)
{
    n->pprev = &n->next;
}

/*
 ,* Move a list from one list head to another. Fixup the pprev
 ,* reference of the first entry if it exists.
 ,*/
static inline void hlist_move_list(struct hlist_head *old,
                                   struct hlist_head *new)
{
    new->first = old->first;
    if (new->first)
        new->first->pprev = &new->first;
    old->first = NULL;
}

#define hlist_entry(ptr, type, member) container_of(ptr,type,member)

#define hlist_for_each(pos, head) \
    for (pos = (head)->first; pos ; pos = pos->next)

#define hlist_for_each_safe(pos, n, head)                    \
    for (pos = (head)->first; pos && ({ n = pos->next; 1; });\
         pos = n)

#define hlist_entry_safe(ptr, type, member)                 \
    ({ typeof(ptr) ____ptr = (ptr);                         \
        ____ptr ? hlist_entry(____ptr, type, member) : NULL;\
    })

/**
 ,* hlist_for_each_entry	- iterate over list of given type
 ,* @pos:	the type * to use as a loop cursor.
 ,* @head:	the head for your list.
 ,* @member:	the name of the hlist_node within the struct.
 ,*/
#define hlist_for_each_entry(pos, head, member)                        \
    for (pos = hlist_entry_safe((head)->first, typeof(*(pos)), member);\
         pos;                                                          \
         pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))

/**
 ,* hlist_for_each_entry_continue - iterate over a hlist continuing after current point
 ,* @pos:	the type * to use as a loop cursor.
 ,* @member:	the name of the hlist_node within the struct.
 ,*/
#define hlist_for_each_entry_continue(pos, member)                          \
    for (pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member);\
         pos;                                                               \
         pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))

/**
 ,* hlist_for_each_entry_from - iterate over a hlist continuing from current point
 ,* @pos:	the type * to use as a loop cursor.
 ,* @member:	the name of the hlist_node within the struct.
 ,*/
#define hlist_for_each_entry_from(pos, member)              \
    for (; pos;                                             \
         pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))

/**
 ,* hlist_for_each_entry_safe - iterate over list of given type safe against removal of list entry
 ,* @pos:	the type * to use as a loop cursor.
 ,* @n:		another &struct hlist_node to use as temporary storage
 ,* @head:	the head for your list.
 ,* @member:	the name of the hlist_node within the struct.
 ,*/
#define hlist_for_each_entry_safe(pos, n, head, member)              \
    for (pos = hlist_entry_safe((head)->first, typeof(*pos), member);\
         pos && ({ n = pos->member.next; 1; });                      \
         pos = hlist_entry_safe(n, typeof(*pos), member))

#endif
   
   #+END_SRC
** main
   :PROPERTIES:
   :header-args: :tangle /tmp/kernel_data_structure/list/main.c :main no :mkdirp yes
   :END:

   头文件：
   #+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include "list.h"
   #+END_SRC

   内核中不是把结构串成一个链。而是在结构中嵌入一个链表。
   #+BEGIN_EXAMPLE
The common pattern for storing this structure in a linked list is to
embed the list pointer in the structure. For example, to describe
that member of the Canidae family:

struct fox {
    unsigned long tail_length; /* length in centimeters of tail */
    unsigned long weight; /* weight in kilograms */
    bool is_fantastic; /* is this fox fantastic? */
    struct fox *next; /* next fox in linked list */
    struct fox *prev; /* previous fox in linked list */
};

The Linux kernel approach is different. Instead of turning the
structure into a linked list, the Linux approach is to "embed a
linked list node in the structure".

The Linked List Structure¶

The linked-list code is declared in the header file <linux/list.h> (
include/linux/list.h#L19) and the data structure is simple:

struct list_head {
    struct list_head *next
    struct list_head *prev;
};

The utility is in how the list_head structure is used:

struct fox {
    unsigned long tail_length; /* length in centimeters of tail */
    unsigned long weight; /* weight in kilograms */
    bool is_fantastic; /* is this fox fantastic? */
    struct list_head list; /* list of all fox structures */
};

With this, list.next in fox points to the next element, and list.prev
in fox points to the previous.
   #+END_EXAMPLE

   把结构串定义的结构体中需要加一个 =list_head= 成员，其实查看代码就知
   道，是通过这个成员的偏移来查找的结构体的首指针：
   #+BEGIN_SRC C
typedef struct test_node_s
{
    int a;
    int b;
    struct list_head list_t;
} test_node_t;
   #+END_SRC
   
   使用时需要先声明一个链表头：
   #+BEGIN_SRC C
static LIST_HEAD(test_list);
   #+END_SRC
   
   声明一些我自定义的函数：
   #+BEGIN_SRC C
int add(int a, int b);
int loop();
int del();
   #+END_SRC

   向链表中添加成员：
   #+BEGIN_SRC C
int add(int a, int b)
{
    test_node_t *t1 = (test_node_t *)malloc(sizeof(test_node_t));

    t1->a = a;
    t1->b = b;
    INIT_LIST_HEAD(&(t1->list_t));

    list_add(&t1->list_t, &test_list);

    return 0;
}
   #+END_SRC
   
   从链表中删除成员，需要注意的是，把成员从链表中的删除后，成员对应的
   空间是没有被释放的，需要使用者自己释放：
   #+BEGIN_SRC C
int del()
{
    test_node_t *t1 = (test_node_t *)malloc(sizeof(test_node_t));

    t1->a = 30;
    t1->b = 40;
    INIT_LIST_HEAD(&(t1->list_t));

    list_add(&t1->list_t, &test_list);

    loop();

    list_del(&t1->list_t);

    loop();

    return 0;
}
   #+END_SRC

   遍历整个链表：
   #+BEGIN_SRC C
int loop()
{
    printf("========================== Loop ======================\n");
    test_node_t *pointer;

    list_for_each_entry(pointer, &test_list, list_t)
    {
        printf("in loop--------> a= %d\n", pointer->a);
    }
    
    return 0;
}
   #+END_SRC
   
   main函数来调用：
   #+BEGIN_SRC C
int main(int args,char *argv[])
{

    add(1, 2);

    add(3, 4);

    loop();

    del();

    return 0;
}
   #+END_SRC
** Makefile
   #+BEGIN_SRC makefile :tangle /tmp/kernel_data_structure/list/Makefile :mkdirp yes 
all: list

list:main.c
	cc -o list main.c
	cc -o example example.c

clean:
	rm -rfv *.o list a.out
   #+END_SRC
** more example
   #+BEGIN_SRC C :tangle /tmp/kernel_data_structure/list/example.c :main no :mkdirp yes
#include <stdio.h>
#include <stdlib.h>

#include "list.h"


struct kool_list
{
	int to;
	struct list_head list;
	int from;
};

int main(int argc, char **argv)
{

	struct kool_list *tmp;
	struct list_head *pos, *q;
	unsigned int i;

	struct kool_list mylist;
	INIT_LIST_HEAD(&mylist.list);
	/* or you could have declared this with the following macro
	 ,* LIST_HEAD(mylist); which declares and initializes the list
	 ,*/

	/* adding elements to mylist */
	for(i=5; i!=0; --i)
    {
		tmp= (struct kool_list *)malloc(sizeof(struct kool_list));
		
		/* INIT_LIST_HEAD(&tmp->list); 
		 ,*
		 ,* this initializes a dynamically allocated list_head. we
		 ,* you can omit this if subsequent call is add_list() or 
		 ,* anything along that line because the next, prev
		 ,* fields get initialized in those functions.
		 ,*/
		printf("enter to and from:");
		scanf("%d %d", &tmp->to, &tmp->from);

		/* add the new item 'tmp' to the list of items in mylist */
		list_add(&(tmp->list), &(mylist.list));
		/* you can also use list_add_tail() which adds new items to
		 ,* the tail end of the list
		 ,*/
	}
	printf("\n");


	/* now you have a circularly linked list of items of type struct kool_list.
	 ,* now let us go through the items and print them out
	 ,*/


	/* list_for_each() is a macro for a for loop. 
	 ,* first parameter is used as the counter in for loop. in other words, inside the
	 ,* loop it points to the current item's list_head.
	 ,* second parameter is the pointer to the list. it is not manipulated by the macro.
	 ,*/
	printf("traversing the list using list_for_each()\n");
	list_for_each(pos, &mylist.list)
    {

		/* at this point: pos->next points to the next item's 'list' variable and 
		 ,* pos->prev points to the previous item's 'list' variable. Here item is 
		 ,* of type struct kool_list. But we need to access the item itself not the 
		 ,* variable 'list' in the item! macro list_entry() does just that. See "How
		 ,* does this work?" below for an explanation of how this is done.
		 ,*/
        tmp= list_entry(pos, struct kool_list, list);

        /* given a pointer to struct list_head, type of data structure it is part of,
         ,* and it's name (struct list_head's name in the data structure) it returns a
         ,* pointer to the data structure in which the pointer is part of.
         ,* For example, in the above line list_entry() will return a pointer to the
         ,* struct kool_list item it is embedded in!
         ,*/

        printf("to= %d from= %d\n", tmp->to, tmp->from);

	}

	printf("\n");
	/* since this is a circularly linked list. you can traverse the list in reverse order
	 ,* as well. all you need to do is replace 'list_for_each' with 'list_for_each_prev'
	 ,* everything else remain the same!
	 ,*
	 ,* Also you can traverse the list using list_for_each_entry() to iterate over a given
	 ,* type of entries. For example:
	 ,*/
	printf("traversing the list using list_for_each_entry()\n");
	list_for_each_entry(tmp, &mylist.list, list)
        printf("to= %d from= %d\n", tmp->to, tmp->from);
	printf("\n");
	

	/* now let's be good and free the kool_list items. since we will be removing items
	 ,* off the list using list_del() we need to use a safer version of the list_for_each() 
	 ,* macro aptly named list_for_each_safe(). Note that you MUST use this macro if the loop 
	 ,* involves deletions of items (or moving items from one list to another).
	 ,*/
	printf("deleting the list using list_for_each_safe()\n");
	list_for_each_safe(pos, q, &mylist.list)
    {
        tmp= list_entry(pos, struct kool_list, list);
        printf("freeing item to= %d from= %d\n", tmp->to, tmp->from);
        list_del(pos);
        free(tmp);
	}

	return 0;
}

  
   #+END_SRC
* TODO Queues
* TODO Maps
* TODO Binary trees
