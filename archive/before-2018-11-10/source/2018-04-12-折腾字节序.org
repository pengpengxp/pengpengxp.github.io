#+AUTHOR: Peng Xie
#+EMAIL: pengpengxpplay@gmail.com
#+SETUPFILE: theme.setup
#+OPTIONS: ^:{}
#+TITLE: 2018-04-12-折腾字节序

字节序只是在内存中存取的时候才需要考虑的。

*在C代码里面使用位操作这些，可以不考虑字节序。*

printf直接用 =%x= 打印32位的数是看不出来大小端的[fn:1:我理解：处理器知
道自己的字节序，它在从内存读写这个32位数时，是已经考虑了字节序的。]。
只能用指针一个字节一个字节打印才看得出来[fn:2:因为这时候一个字节一个字
节访问，才真正可以体现出数据在内存中的存储情况。]。

一次读写超过一个字节的内容时，可能就需要考虑字节序了。

阮一峰老师的文章讲得浅显易懂 [[http://www.ruanyifeng.com/blog/2016/11/byte-order.html][理解字节序]] 。

然后他还推荐了这篇文章： [[https://blog.erratasec.com/2016/11/how-to-teach-endian.html#.Ws6-ida-v3U][How to teach endian]] 。

我当前主要是涉及到ip地址的问题：
#+BEGIN_SRC C :exports both
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <arpa/inet.h>

int main(int args,char *argv[])
{
    struct in_addr  big_endian_ip;
    struct in_addr  little_endian_ip;
    uint8_t *p;
    inet_aton("1.2.3.4", &big_endian_ip);
    little_endian_ip.s_addr = ntohl(big_endian_ip.s_addr);

    printf("只有通过指针p才看得出来大小端，x86是小端的机器，在x86上以1.2.3.4为例：\n");
    printf("\n==========================================\n");

    p = (uint8_t *)&big_endian_ip;
    printf("hex_dump_big_endian_ip 0x%x\n", big_endian_ip.s_addr);
    printf("\n==========================================\n");
    printf("big_endian==>p[0] %d\n", p[0]);
    printf("big_endian==>p[1] %d\n", p[1]);
    printf("big_endian==>p[2] %d\n", p[2]);
    printf("big_endian==>p[3] %d\n", p[3]);
    printf("\n==========================================\n");

    printf("big_endian_ip>>24 %d\n", big_endian_ip.s_addr >> 24 & 0xFF);
    printf("big_endian_ip>>16  %d\n", big_endian_ip.s_addr >> 16 & 0xFF);
    printf("big_endian_ip>>8 %d\n", big_endian_ip.s_addr >> 8 & 0xFF);
    printf("big_endian_ip>>0 %d\n", big_endian_ip.s_addr & 0xFF);

    
    p = (uint8_t *)&little_endian_ip;
    printf("\n==========================================\n");
    printf("hex_dump_little_endian_ip 0x%x\n", little_endian_ip.s_addr);
    printf("\n==========================================\n");

    printf("little_endian==>p[0] %d\n", p[0]);
    printf("little_endian==>p[1] %d\n", p[1]);
    printf("little_endian==>p[2] %d\n", p[2]);
    printf("little_endian==>p[3] %d\n", p[3]);
    printf("\n==========================================\n");

    printf("little_endian_ip>>24 %d\n", little_endian_ip.s_addr >> 24 & 0xFF);
    printf("little_endian_ip>>16 %d\n", little_endian_ip.s_addr >> 16 & 0xFF);
    printf("little_endian_ip>>8 %d\n", little_endian_ip.s_addr >> 8 & 0xFF);
    printf("little_endian_ip>>0 %d\n", little_endian_ip.s_addr & 0xFF);

    return 0;
}
#+END_SRC

#+RESULTS:
| 只有通过指针p才看得出来大小端，x86是小端的机器，在x86上以1.2.3.4为例： |           |
|                                                                        |           |
| ==========================================                             |           |
| hex_dump_big_endian_ip                                                 | 0x4030201 |
|                                                                        |           |
| ==========================================                             |           |
| big_endian==>p[0]                                                      |         1 |
| big_endian==>p[1]                                                      |         2 |
| big_endian==>p[2]                                                      |         3 |
| big_endian==>p[3]                                                      |         4 |
|                                                                        |           |
| ==========================================                             |           |
| big_endian_ip>>24                                                      |         4 |
| big_endian_ip>>16                                                      |         3 |
| big_endian_ip>>8                                                       |         2 |
| big_endian_ip>>0                                                       |         1 |
|                                                                        |           |
| ==========================================                             |           |
| hex_dump_little_endian_ip                                              | 0x1020304 |
|                                                                        |           |
| ==========================================                             |           |
| little_endian==>p[0]                                                   |         4 |
| little_endian==>p[1]                                                   |         3 |
| little_endian==>p[2]                                                   |         2 |
| little_endian==>p[3]                                                   |         1 |
|                                                                        |           |
| ==========================================                             |           |
| little_endian_ip>>24                                                   |         1 |
| little_endian_ip>>16                                                   |         2 |
| little_endian_ip>>8                                                    |         3 |
| little_endian_ip>>0                                                    |         4 |

*inet_aton这个函数转出来是大端* 。
#+BEGIN_SRC C :exports both
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <arpa/inet.h>

int main(int args,char *argv[])
{
    int a = 0x01020304;
    uint8_t *p = (uint8_t *)&a;

    printf("hex_dump %x\n", a);
    printf("p[0] %d\n", p[0]);
    printf("p[1] %d\n", p[1]);
    printf("p[2] %d\n", p[2]);
    printf("p[3] %d\n", p[3]);
    printf("\n================\n");
    printf("a>>24 %d\n", a >> 24 & 0XFF);
    printf("a>>16 %d\n", a >> 16 & 0XFF);
    printf("a>>8  %d\n", a >> 8  & 0XFF);
    printf("a>>0 %d\n", a & 0XFF);


    printf("\n================\n");
    struct in_addr ip;
    inet_aton("224.2.3.4", &ip);

    p = (uint8_t *)&ip.s_addr;
    printf("hex_dump %x\n", ip.s_addr);
    printf("p[0] = %d\n", p[0]);
    printf("p[1] = %d\n", p[1]);
    printf("p[2] = %d\n", p[2]);
    printf("p[3] = %d\n", p[3]);
    printf("\n================\n");
    printf("ip>>24 = %d\n", ip.s_addr >> 24 & 0xFF);
    printf("ip>>16 = %d\n", ip.s_addr >> 16 & 0xFF);
    printf("ip>>8  = %d\n", ip.s_addr >> 8  & 0xFF);
    printf("ip>>0 = %d\n", ip.s_addr & 0xFF);


    ip.s_addr = ntohl(ip.s_addr);
    printf("prefix = %d\n", ip.s_addr >> 28);

    
    return 0;
}

#+END_SRC

#+RESULTS:
| hex_dump         | 1020304 |     |
| p[0]             |       4 |     |
| p[1]             |       3 |     |
| p[2]             |       2 |     |
| p[3]             |       1 |     |
|                  |         |     |
| ================ |         |     |
| a>>24            |       1 |     |
| a>>16            |       2 |     |
| a>>8             |       3 |     |
| a>>0             |       4 |     |
|                  |         |     |
| ================ |         |     |
| hex_dump         | 40302e0 |     |
| p[0]             |       = | 224 |
| p[1]             |       = |   2 |
| p[2]             |       = |   3 |
| p[3]             |       = |   4 |
|                  |         |     |
| ================ |         |     |
| ip>>24           |       = |   4 |
| ip>>16           |       = |   3 |
| ip>>8            |       = |   2 |
| ip>>0            |       = | 224 |
| prefix           |       = |  14 |

*inet_pton这个函数转出来是大端* 。
#+BEGIN_SRC C :exports both
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

int main(int args,char *argv[])
{
    int b;
    uint8_t * p;

    inet_pton(AF_INET, "192.168.31.1", &b);
    p = (uint8_t *)&b;
    printf("hex_dump %x\n", b);
    printf("p[0] %d\n", p[0]);
    printf("p[1] %d\n", p[1]);
    printf("p[2] %d\n", p[2]);
    printf("p[3] %d\n", p[3]);

    return 0;
}

#+END_SRC

#+RESULTS:
| hex_dump | 11fa8c0 |
| p[0]     |     192 |
| p[1]     |     168 |
| p[2]     |      31 |
| p[3]     |       1 |
